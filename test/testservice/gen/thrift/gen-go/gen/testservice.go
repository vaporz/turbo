// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package gen

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - Message
type SayHelloResponse struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewSayHelloResponse() *SayHelloResponse {
  return &SayHelloResponse{}
}


func (p *SayHelloResponse) GetMessage() string {
  return p.Message
}
func (p *SayHelloResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SayHelloResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *SayHelloResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SayHelloResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SayHelloResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *SayHelloResponse) Equals(other *SayHelloResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *SayHelloResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SayHelloResponse(%+v)", *p)
}

func (p *SayHelloResponse) Validate() error {
  return nil
}
// Attributes:
//  - StringValue
//  - Int32Value
//  - BoolValue
type TestJsonRequest struct {
  StringValue string `thrift:"stringValue,1" db:"stringValue" json:"stringValue"`
  Int32Value int32 `thrift:"int32Value,2" db:"int32Value" json:"int32Value"`
  BoolValue bool `thrift:"boolValue,3" db:"boolValue" json:"boolValue"`
}

func NewTestJsonRequest() *TestJsonRequest {
  return &TestJsonRequest{}
}


func (p *TestJsonRequest) GetStringValue() string {
  return p.StringValue
}

func (p *TestJsonRequest) GetInt32Value() int32 {
  return p.Int32Value
}

func (p *TestJsonRequest) GetBoolValue() bool {
  return p.BoolValue
}
func (p *TestJsonRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestJsonRequest)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StringValue = v
}
  return nil
}

func (p *TestJsonRequest)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Int32Value = v
}
  return nil
}

func (p *TestJsonRequest)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *TestJsonRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TestJsonRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestJsonRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stringValue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StringValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stringValue: ", p), err) }
  return err
}

func (p *TestJsonRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "int32Value", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:int32Value: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Int32Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int32Value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:int32Value: ", p), err) }
  return err
}

func (p *TestJsonRequest) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "boolValue", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:boolValue: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:boolValue: ", p), err) }
  return err
}

func (p *TestJsonRequest) Equals(other *TestJsonRequest) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StringValue != other.StringValue { return false }
  if p.Int32Value != other.Int32Value { return false }
  if p.BoolValue != other.BoolValue { return false }
  return true
}

func (p *TestJsonRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestJsonRequest(%+v)", *p)
}

func (p *TestJsonRequest) Validate() error {
  return nil
}
// Attributes:
//  - Message
type TestJsonResponse struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTestJsonResponse() *TestJsonResponse {
  return &TestJsonResponse{}
}


func (p *TestJsonResponse) GetMessage() string {
  return p.Message
}
func (p *TestJsonResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestJsonResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TestJsonResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TestJsonResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestJsonResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TestJsonResponse) Equals(other *TestJsonResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *TestJsonResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestJsonResponse(%+v)", *p)
}

func (p *TestJsonResponse) Validate() error {
  return nil
}
// Attributes:
//  - Message
type EatResponse struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewEatResponse() *EatResponse {
  return &EatResponse{}
}


func (p *EatResponse) GetMessage() string {
  return p.Message
}
func (p *EatResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *EatResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *EatResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "EatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *EatResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *EatResponse) Equals(other *EatResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *EatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("EatResponse(%+v)", *p)
}

func (p *EatResponse) Validate() error {
  return nil
}
type TestService interface {
  // Parameters:
  //  - Values
  //  - YourName
  //  - Int64Value
  //  - BoolValue
  //  - Float64Value
  //  - Uint64Value
  //  - Int32Value
  //  - Int16Value
  //  - StringList
  //  - I32List
  //  - BoolList
  //  - DoubleList
  SayHello(ctx context.Context, values *CommonValues, yourName string, int64Value int64, boolValue bool, float64Value float64, uint64Value int64, int32Value int32, int16Value int16, stringList []string, i32List []int32, boolList []bool, doubleList []float64) (_r *SayHelloResponse, _err error)
  // Parameters:
  //  - Request
  TestJson(ctx context.Context, request *TestJsonRequest) (_r *TestJsonResponse, _err error)
}

type TestServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewTestServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TestServiceClient {
  return &TestServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTestServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TestServiceClient {
  return &TestServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTestServiceClient(c thrift.TClient) *TestServiceClient {
  return &TestServiceClient{
    c: c,
  }
}

func (p *TestServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *TestServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *TestServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Values
//  - YourName
//  - Int64Value
//  - BoolValue
//  - Float64Value
//  - Uint64Value
//  - Int32Value
//  - Int16Value
//  - StringList
//  - I32List
//  - BoolList
//  - DoubleList
func (p *TestServiceClient) SayHello(ctx context.Context, values *CommonValues, yourName string, int64Value int64, boolValue bool, float64Value float64, uint64Value int64, int32Value int32, int16Value int16, stringList []string, i32List []int32, boolList []bool, doubleList []float64) (_r *SayHelloResponse, _err error) {
  var _args0 TestServiceSayHelloArgs
  _args0.Values = values
  _args0.YourName = yourName
  _args0.Int64Value = int64Value
  _args0.BoolValue = boolValue
  _args0.Float64Value = float64Value
  _args0.Uint64Value = uint64Value
  _args0.Int32Value = int32Value
  _args0.Int16Value = int16Value
  _args0.StringList = stringList
  _args0.I32List = i32List
  _args0.BoolList = boolList
  _args0.DoubleList = doubleList
  var _result2 TestServiceSayHelloResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "sayHello", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "sayHello failed: unknown result")
}

// Parameters:
//  - Request
func (p *TestServiceClient) TestJson(ctx context.Context, request *TestJsonRequest) (_r *TestJsonResponse, _err error) {
  var _args4 TestServiceTestJsonArgs
  _args4.Request = request
  var _result6 TestServiceTestJsonResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "testJson", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "testJson failed: unknown result")
}

type TestServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TestService
}

func (p *TestServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TestServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TestServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTestServiceProcessor(handler TestService) *TestServiceProcessor {

  self8 := &TestServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self8.processorMap["sayHello"] = &testServiceProcessorSayHello{handler:handler}
  self8.processorMap["testJson"] = &testServiceProcessorTestJson{handler:handler}
return self8
}

func (p *TestServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x9 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x9.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x9

}

type testServiceProcessorSayHello struct {
  handler TestService
}

func (p *testServiceProcessorSayHello) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err10 error
  args := TestServiceSayHelloArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "sayHello", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TestServiceSayHelloResult{}
  if retval, err2 := p.handler.SayHello(ctx, args.Values, args.YourName, args.Int64Value, args.BoolValue, args.Float64Value, args.Uint64Value, args.Int32Value, args.Int16Value, args.StringList, args.I32List, args.BoolList, args.DoubleList); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc11 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sayHello: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "sayHello", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if err2 := _exc11.Write(ctx, oprot); _write_err10 == nil && err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err10 == nil && err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err10 == nil && err2 != nil {
      _write_err10 = thrift.WrapTException(err2)
    }
    if _write_err10 != nil {
      return false, thrift.WrapTException(_write_err10)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "sayHello", thrift.REPLY, seqId); err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err10 == nil && err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err10 == nil && err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err10 == nil && err2 != nil {
    _write_err10 = thrift.WrapTException(err2)
  }
  if _write_err10 != nil {
    return false, thrift.WrapTException(_write_err10)
  }
  return true, err
}

type testServiceProcessorTestJson struct {
  handler TestService
}

func (p *testServiceProcessorTestJson) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err12 error
  args := TestServiceTestJsonArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "testJson", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := TestServiceTestJsonResult{}
  if retval, err2 := p.handler.TestJson(ctx, args.Request); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc13 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testJson: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "testJson", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if err2 := _exc13.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
      _write_err12 = thrift.WrapTException(err2)
    }
    if _write_err12 != nil {
      return false, thrift.WrapTException(_write_err12)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "testJson", thrift.REPLY, seqId); err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err12 == nil && err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err12 == nil && err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err12 == nil && err2 != nil {
    _write_err12 = thrift.WrapTException(err2)
  }
  if _write_err12 != nil {
    return false, thrift.WrapTException(_write_err12)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Values
//  - YourName
//  - Int64Value
//  - BoolValue
//  - Float64Value
//  - Uint64Value
//  - Int32Value
//  - Int16Value
//  - StringList
//  - I32List
//  - BoolList
//  - DoubleList
type TestServiceSayHelloArgs struct {
  Values *CommonValues `thrift:"values,1" db:"values" json:"values"`
  YourName string `thrift:"yourName,2" db:"yourName" json:"yourName"`
  Int64Value int64 `thrift:"int64Value,3" db:"int64Value" json:"int64Value"`
  BoolValue bool `thrift:"boolValue,4" db:"boolValue" json:"boolValue"`
  Float64Value float64 `thrift:"float64Value,5" db:"float64Value" json:"float64Value"`
  Uint64Value int64 `thrift:"uint64Value,6" db:"uint64Value" json:"uint64Value"`
  Int32Value int32 `thrift:"int32Value,7" db:"int32Value" json:"int32Value"`
  Int16Value int16 `thrift:"int16Value,8" db:"int16Value" json:"int16Value"`
  StringList []string `thrift:"stringList,9" db:"stringList" json:"stringList"`
  I32List []int32 `thrift:"i32List,10" db:"i32List" json:"i32List"`
  BoolList []bool `thrift:"boolList,11" db:"boolList" json:"boolList"`
  DoubleList []float64 `thrift:"doubleList,12" db:"doubleList" json:"doubleList"`
}

func NewTestServiceSayHelloArgs() *TestServiceSayHelloArgs {
  return &TestServiceSayHelloArgs{}
}

var TestServiceSayHelloArgs_Values_DEFAULT *CommonValues
func (p *TestServiceSayHelloArgs) GetValues() *CommonValues {
  if !p.IsSetValues() {
    return TestServiceSayHelloArgs_Values_DEFAULT
  }
return p.Values
}

func (p *TestServiceSayHelloArgs) GetYourName() string {
  return p.YourName
}

func (p *TestServiceSayHelloArgs) GetInt64Value() int64 {
  return p.Int64Value
}

func (p *TestServiceSayHelloArgs) GetBoolValue() bool {
  return p.BoolValue
}

func (p *TestServiceSayHelloArgs) GetFloat64Value() float64 {
  return p.Float64Value
}

func (p *TestServiceSayHelloArgs) GetUint64Value() int64 {
  return p.Uint64Value
}

func (p *TestServiceSayHelloArgs) GetInt32Value() int32 {
  return p.Int32Value
}

func (p *TestServiceSayHelloArgs) GetInt16Value() int16 {
  return p.Int16Value
}

func (p *TestServiceSayHelloArgs) GetStringList() []string {
  return p.StringList
}

func (p *TestServiceSayHelloArgs) GetI32List() []int32 {
  return p.I32List
}

func (p *TestServiceSayHelloArgs) GetBoolList() []bool {
  return p.BoolList
}

func (p *TestServiceSayHelloArgs) GetDoubleList() []float64 {
  return p.DoubleList
}
func (p *TestServiceSayHelloArgs) IsSetValues() bool {
  return p.Values != nil
}

func (p *TestServiceSayHelloArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Values = &CommonValues{}
  if err := p.Values.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Values), err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.YourName = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Int64Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BoolValue = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Float64Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Uint64Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Int32Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Int16Value = v
}
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StringList =  tSlice
  for i := 0; i < size; i ++ {
var _elem14 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem14 = v
}
    p.StringList = append(p.StringList, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.I32List =  tSlice
  for i := 0; i < size; i ++ {
var _elem15 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem15 = v
}
    p.I32List = append(p.I32List, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]bool, 0, size)
  p.BoolList =  tSlice
  for i := 0; i < size; i ++ {
var _elem16 bool
    if v, err := iprot.ReadBool(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem16 = v
}
    p.BoolList = append(p.BoolList, _elem16)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.DoubleList =  tSlice
  for i := 0; i < size; i ++ {
var _elem17 float64
    if v, err := iprot.ReadDouble(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem17 = v
}
    p.DoubleList = append(p.DoubleList, _elem17)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TestServiceSayHelloArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sayHello_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceSayHelloArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "values", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:values: ", p), err) }
  if err := p.Values.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Values), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:values: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "yourName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:yourName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.YourName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.yourName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:yourName: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "int64Value", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:int64Value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Int64Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int64Value (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:int64Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "boolValue", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:boolValue: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.BoolValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolValue (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:boolValue: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "float64Value", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:float64Value: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Float64Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.float64Value (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:float64Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "uint64Value", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:uint64Value: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Uint64Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uint64Value (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:uint64Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "int32Value", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:int32Value: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Int32Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int32Value (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:int32Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "int16Value", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:int16Value: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Int16Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.int16Value (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:int16Value: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringList", thrift.LIST, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:stringList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.StringList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StringList {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:stringList: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "i32List", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:i32List: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.I32List)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.I32List {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:i32List: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "boolList", thrift.LIST, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:boolList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.BOOL, len(p.BoolList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.BoolList {
    if err := oprot.WriteBool(ctx, bool(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:boolList: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "doubleList", thrift.LIST, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:doubleList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.DOUBLE, len(p.DoubleList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.DoubleList {
    if err := oprot.WriteDouble(ctx, float64(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:doubleList: ", p), err) }
  return err
}

func (p *TestServiceSayHelloArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceSayHelloArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TestServiceSayHelloResult struct {
  Success *SayHelloResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTestServiceSayHelloResult() *TestServiceSayHelloResult {
  return &TestServiceSayHelloResult{}
}

var TestServiceSayHelloResult_Success_DEFAULT *SayHelloResponse
func (p *TestServiceSayHelloResult) GetSuccess() *SayHelloResponse {
  if !p.IsSetSuccess() {
    return TestServiceSayHelloResult_Success_DEFAULT
  }
return p.Success
}
func (p *TestServiceSayHelloResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TestServiceSayHelloResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceSayHelloResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &SayHelloResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TestServiceSayHelloResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "sayHello_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceSayHelloResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TestServiceSayHelloResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceSayHelloResult(%+v)", *p)
}

// Attributes:
//  - Request
type TestServiceTestJsonArgs struct {
  Request *TestJsonRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTestServiceTestJsonArgs() *TestServiceTestJsonArgs {
  return &TestServiceTestJsonArgs{}
}

var TestServiceTestJsonArgs_Request_DEFAULT *TestJsonRequest
func (p *TestServiceTestJsonArgs) GetRequest() *TestJsonRequest {
  if !p.IsSetRequest() {
    return TestServiceTestJsonArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TestServiceTestJsonArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TestServiceTestJsonArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceTestJsonArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Request = &TestJsonRequest{}
  if err := p.Request.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TestServiceTestJsonArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "testJson_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceTestJsonArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TestServiceTestJsonArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceTestJsonArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TestServiceTestJsonResult struct {
  Success *TestJsonResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTestServiceTestJsonResult() *TestServiceTestJsonResult {
  return &TestServiceTestJsonResult{}
}

var TestServiceTestJsonResult_Success_DEFAULT *TestJsonResponse
func (p *TestServiceTestJsonResult) GetSuccess() *TestJsonResponse {
  if !p.IsSetSuccess() {
    return TestServiceTestJsonResult_Success_DEFAULT
  }
return p.Success
}
func (p *TestServiceTestJsonResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TestServiceTestJsonResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TestServiceTestJsonResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &TestJsonResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TestServiceTestJsonResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "testJson_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TestServiceTestJsonResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TestServiceTestJsonResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TestServiceTestJsonResult(%+v)", *p)
}


type MinionsService interface {
  // Parameters:
  //  - Food
  Eat(ctx context.Context, food string) (_r *EatResponse, _err error)
}

type MinionsServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewMinionsServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *MinionsServiceClient {
  return &MinionsServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewMinionsServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *MinionsServiceClient {
  return &MinionsServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewMinionsServiceClient(c thrift.TClient) *MinionsServiceClient {
  return &MinionsServiceClient{
    c: c,
  }
}

func (p *MinionsServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *MinionsServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *MinionsServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Food
func (p *MinionsServiceClient) Eat(ctx context.Context, food string) (_r *EatResponse, _err error) {
  var _args61 MinionsServiceEatArgs
  _args61.Food = food
  var _result63 MinionsServiceEatResult
  var _meta62 thrift.ResponseMeta
  _meta62, _err = p.Client_().Call(ctx, "Eat", &_args61, &_result63)
  p.SetLastResponseMeta_(_meta62)
  if _err != nil {
    return
  }
  if _ret64 := _result63.GetSuccess(); _ret64 != nil {
    return _ret64, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Eat failed: unknown result")
}

type MinionsServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler MinionsService
}

func (p *MinionsServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *MinionsServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *MinionsServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewMinionsServiceProcessor(handler MinionsService) *MinionsServiceProcessor {

  self65 := &MinionsServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self65.processorMap["Eat"] = &minionsServiceProcessorEat{handler:handler}
return self65
}

func (p *MinionsServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x66 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x66.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x66

}

type minionsServiceProcessorEat struct {
  handler MinionsService
}

func (p *minionsServiceProcessorEat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err67 error
  args := MinionsServiceEatArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "Eat", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelCauseFunc
    ctx, cancel = context.WithCancelCause(ctx)
    defer cancel(nil)
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelCauseFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel(thrift.ErrAbandonRequest)
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := MinionsServiceEatResult{}
  if retval, err2 := p.handler.Eat(ctx, args.Food); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    if errors.Is(err2, context.Canceled) {
      if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err)
      }
    }
    _exc68 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Eat: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "Eat", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if err2 := _exc68.Write(ctx, oprot); _write_err67 == nil && err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err67 == nil && err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err67 == nil && err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if _write_err67 != nil {
      return false, thrift.WrapTException(_write_err67)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "Eat", thrift.REPLY, seqId); err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if _write_err67 != nil {
    return false, thrift.WrapTException(_write_err67)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Food
type MinionsServiceEatArgs struct {
  Food string `thrift:"food,1" db:"food" json:"food"`
}

func NewMinionsServiceEatArgs() *MinionsServiceEatArgs {
  return &MinionsServiceEatArgs{}
}


func (p *MinionsServiceEatArgs) GetFood() string {
  return p.Food
}
func (p *MinionsServiceEatArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MinionsServiceEatArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Food = v
}
  return nil
}

func (p *MinionsServiceEatArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Eat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MinionsServiceEatArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "food", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:food: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Food)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.food (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:food: ", p), err) }
  return err
}

func (p *MinionsServiceEatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MinionsServiceEatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type MinionsServiceEatResult struct {
  Success *EatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewMinionsServiceEatResult() *MinionsServiceEatResult {
  return &MinionsServiceEatResult{}
}

var MinionsServiceEatResult_Success_DEFAULT *EatResponse
func (p *MinionsServiceEatResult) GetSuccess() *EatResponse {
  if !p.IsSetSuccess() {
    return MinionsServiceEatResult_Success_DEFAULT
  }
return p.Success
}
func (p *MinionsServiceEatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *MinionsServiceEatResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MinionsServiceEatResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &EatResponse{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *MinionsServiceEatResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Eat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MinionsServiceEatResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *MinionsServiceEatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("MinionsServiceEatResult(%+v)", *p)
}


