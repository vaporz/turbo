// Code generated by Thrift Compiler (0.19.0). DO NOT EDIT.

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/vaporz/turbo/test/testservice/gen/thrift/gen-go/gen"
)

var _ = gen.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  SayHelloResponse sayHello(CommonValues values, string yourName, i64 int64Value, bool boolValue, double float64Value, i64 uint64Value, i32 int32Value, i16 int16Value,  stringList,  i32List,  boolList,  doubleList)")
  fmt.Fprintln(os.Stderr, "  TestJsonResponse testJson(TestJsonRequest request)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  var cfg *thrift.TConfiguration = nil
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans = thrift.NewTSocketConf(net.JoinHostPort(host, portStr), cfg)
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransportConf(trans, cfg)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactoryConf(cfg)
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactoryConf(cfg)
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryConf(cfg)
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := gen.NewTestServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "sayHello":
    if flag.NArg() - 1 != 12 {
      fmt.Fprintln(os.Stderr, "SayHello requires 12 args")
      flag.Usage()
    }
    arg18 := flag.Arg(1)
    mbTrans19 := thrift.NewTMemoryBufferLen(len(arg18))
    defer mbTrans19.Close()
    _, err20 := mbTrans19.WriteString(arg18)
    if err20 != nil {
      Usage()
      return
    }
    factory21 := thrift.NewTJSONProtocolFactory()
    jsProt22 := factory21.GetProtocol(mbTrans19)
    argvalue0 := gen.NewCommonValues()
    err23 := argvalue0.Read(context.Background(), jsProt22)
    if err23 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err25 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err25 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4, err27 := (strconv.ParseFloat(flag.Arg(5), 64))
    if err27 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5, err28 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err28 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    tmp6, err29 := (strconv.Atoi(flag.Arg(7)))
    if err29 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    tmp7, err30 := (strconv.Atoi(flag.Arg(8)))
    if err30 != nil {
      Usage()
      return
    }
    argvalue7 := int16(tmp7)
    value7 := argvalue7
    arg31 := flag.Arg(9)
    mbTrans32 := thrift.NewTMemoryBufferLen(len(arg31))
    defer mbTrans32.Close()
    _, err33 := mbTrans32.WriteString(arg31)
    if err33 != nil { 
      Usage()
      return
    }
    factory34 := thrift.NewTJSONProtocolFactory()
    jsProt35 := factory34.GetProtocol(mbTrans32)
    containerStruct8 := gen.NewTestServiceSayHelloArgs()
    err36 := containerStruct8.ReadField9(context.Background(), jsProt35)
    if err36 != nil {
      Usage()
      return
    }
    argvalue8 := containerStruct8.StringList
    value8 := argvalue8
    arg37 := flag.Arg(10)
    mbTrans38 := thrift.NewTMemoryBufferLen(len(arg37))
    defer mbTrans38.Close()
    _, err39 := mbTrans38.WriteString(arg37)
    if err39 != nil { 
      Usage()
      return
    }
    factory40 := thrift.NewTJSONProtocolFactory()
    jsProt41 := factory40.GetProtocol(mbTrans38)
    containerStruct9 := gen.NewTestServiceSayHelloArgs()
    err42 := containerStruct9.ReadField10(context.Background(), jsProt41)
    if err42 != nil {
      Usage()
      return
    }
    argvalue9 := containerStruct9.I32List
    value9 := argvalue9
    arg43 := flag.Arg(11)
    mbTrans44 := thrift.NewTMemoryBufferLen(len(arg43))
    defer mbTrans44.Close()
    _, err45 := mbTrans44.WriteString(arg43)
    if err45 != nil { 
      Usage()
      return
    }
    factory46 := thrift.NewTJSONProtocolFactory()
    jsProt47 := factory46.GetProtocol(mbTrans44)
    containerStruct10 := gen.NewTestServiceSayHelloArgs()
    err48 := containerStruct10.ReadField11(context.Background(), jsProt47)
    if err48 != nil {
      Usage()
      return
    }
    argvalue10 := containerStruct10.BoolList
    value10 := argvalue10
    arg49 := flag.Arg(12)
    mbTrans50 := thrift.NewTMemoryBufferLen(len(arg49))
    defer mbTrans50.Close()
    _, err51 := mbTrans50.WriteString(arg49)
    if err51 != nil { 
      Usage()
      return
    }
    factory52 := thrift.NewTJSONProtocolFactory()
    jsProt53 := factory52.GetProtocol(mbTrans50)
    containerStruct11 := gen.NewTestServiceSayHelloArgs()
    err54 := containerStruct11.ReadField12(context.Background(), jsProt53)
    if err54 != nil {
      Usage()
      return
    }
    argvalue11 := containerStruct11.DoubleList
    value11 := argvalue11
    fmt.Print(client.SayHello(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9, value10, value11))
    fmt.Print("\n")
    break
  case "testJson":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TestJson requires 1 args")
      flag.Usage()
    }
    arg55 := flag.Arg(1)
    mbTrans56 := thrift.NewTMemoryBufferLen(len(arg55))
    defer mbTrans56.Close()
    _, err57 := mbTrans56.WriteString(arg55)
    if err57 != nil {
      Usage()
      return
    }
    factory58 := thrift.NewTJSONProtocolFactory()
    jsProt59 := factory58.GetProtocol(mbTrans56)
    argvalue0 := gen.NewTestJsonRequest()
    err60 := argvalue0.Read(context.Background(), jsProt59)
    if err60 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TestJson(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
